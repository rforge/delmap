
R version 2.15.0 (2012-03-30)
Copyright (C) 2012 The R Foundation for Statistical Computing
ISBN 3-900051-07-0
Platform: x86_64-unknown-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> pkgname <- "delmap"
> source(file.path(R.home("share"), "R", "examples-header.R"))
> options(warn = 1)
> library('delmap')
Loading required package: TSP
Loading required package: seriation
Loading required package: cluster
Loading required package: gclus
Loading required package: grid
Loading required package: colorspace
> 
> assign(".oldSearch", search(), pos = 'CheckExEnv')
> cleanEx()
> nameEx("CleanData")
> ### * CleanData
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: CleanData
> ### Title: Clean Data in Readiness for Analysis
> ### Aliases: CleanData
> 
> ### ** Examples
> 
> # generate deletion data
> Slist <-  SimDeletions( numlines = 50, plines = 0.2, nummarkers = 20,
+     Enumdel = 4, p.missing = 0.02,  seed = 1)
> 
> # Number of marker loci before beign cleaned
> nrow(Slist[["missing"]])
[1] 50
> 
> # Clean data but where missing genotypes are ignored.
> CleanData(Slist[["missing"]])
 A summary of this object is: 

 The (recoded) deletion data are: 
0 0 0 0 0 0 0 0
0 0 0 0 0 0 0 0
0 0 1 1 1 1 1 0
0 0 0 0 0 1 1 0
1 1 1 1 0 0 0 0

 Marker names (in column data order) are: 
  L10 L19 L28 L29 L30 L42 L43 L44 

 Line names (in row data order) are: 
  M3 M4 M5 M6 M7 ... 

 The proportion of genotypes missing is 0 
> nrow(CleanData(Slist[["missing"]]))
[1] 8
> 
> # Clean data but where colums/rows with missing genotypes are retained
> # for later use. 
> nrow(CleanData(Slist[["missing"]],ignoreNA=FALSE))
[1] 21
> 
> 
> 
> cleanEx()
> nameEx("CreateDistMatrix")
> ### * CreateDistMatrix
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: CreateDistMatrix
> ### Title: Distance Measure Computation
> ### Aliases: CreateDistMatrix
> 
> ### ** Examples
> 
> ##---- Should be DIRECTLY executable !! ----
> ##-- ==>  Define data, use random,
> ##--	or do  help(data=index) for the standard data sets.
> 
> # deletion data where 1 is a deletion
> dd <- matrix(data=c(0,0,1,1, 
+                         0,0,0,1, 
+                         1,0,0,0, 
+                         0,1,0,0,  
+                         1,1,1,0), nrow=5)
> # calculate distance matrix for deletion data
> CreateDistMatrix(mat=dd)
  1 2 3
2 0    
3 1 1  
4 0 0 1
> 
> 
> 
> 
> cleanEx()
> nameEx("IdentifyMarkerBlocks")
> ### * IdentifyMarkerBlocks
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: IdentifyMarkerBlocks
> ### Title: Identify Marker Blocks
> ### Aliases: IdentifyMarkerBlocks
> 
> ### ** Examples
> 
> # generate deletion data
> Slist <-  SimDeletions( numlines = 50, plines = 0.2, nummarkers = 20,
+     Enumdel = 4, p.missing = 0.02,  seed = 1)
> 
> # class of object that does not contain any missing data
> class(Slist[["nomissing"]])
[1] "delmap.data"
> 
> ## Clean data i.e. remove rows/columns without deletion data
> Slist[["nomissing"]] <- CleanData(Slist[["nomissing"]])
> 
> # print the block and possible marker orderings with each block for
> # the simulated deletion data
> IdentifyMarkerBlocks(Slist[["nomissing"]])
 [1] 1 1 1 1 1 1 1 2 2 2 2 2 2 2 2 2 3
> 
> 
> 
> cleanEx()
> nameEx("IdentifyMarkerOrd")
> ### * IdentifyMarkerOrd
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: IdentifyMarkerOrd
> ### Title: Identify Marker Orderings
> ### Aliases: IdentifyMarkerOrd
> 
> ### ** Examples
> 
> # generate deletion data
> Slist <-  SimDeletions( numlines = 50, plines = 0.2, nummarkers = 20,
+     Enumdel = 4, p.missing = 0.02,  seed = 1)
> 
> # class of object that does not contain any missing data
> class(Slist[["nomissing"]])
[1] "delmap.data"
> 
> ## Clean data i.e. remove rows/columns without deletion data
> Slist[["nomissing"]] <- CleanData(Slist[["nomissing"]])
> 
> # print the block and possible marker orderings with each block for
> # the simulated deletion data
> IdentifyMarkerOrd(Slist[["nomissing"]])
$blocks
 [1] 1 1 1 1 1 1 1 2 2 2 2 2 2 2 2 2 3

$orders
$orders[[1]]
[1] 1 2 3 3 4 5 5

$orders[[2]]
[1] 1 1 1 1 2 3 4 4 4

$orders[[3]]
[1] 1


> 
> 
> 
> cleanEx()
> nameEx("ImputeMissingGeno")
> ### * ImputeMissingGeno
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: ImputeMissingGeno
> ### Title: Impute Missing Marker Genotypes
> ### Aliases: ImputeMissingGeno
> 
> ### ** Examples
> 
> # example to be done
> # generate deletion data
> Slist <-  SimDeletions( numlines = 50, plines = 0.2, nummarkers = 20,
+     Enumdel = 4, p.missing = 0.02,  seed = 1)
> 
> # class of object that does not contain any missing data
> class(Slist[["missing"]])
[1] "delmap.data"
> 
> 
> # impute missing genotypes
> ImputeMissingGeno(Slist[["missing"]])
 A summary of this object is: 

 The (recoded) deletion data are: 
0 0 0 0 0 0 0 0
0 0 0 0 0 0 0 0
0 0 0 0 0 0 0 0
0 0 0 0 0 0 0 0
0 0 0 0 0 0 0 0

 Marker names (in column data order) are: 
  L1 L2 L3 L4 L5 L6 L7 L8 L9 ... 

 Line names (in row data order) are: 
  M1 M2 M3 M4 M5 ... 

 The proportion of genotypes missing is 0 
> 
> 
> 
> 
> 
> 
> cleanEx()
> nameEx("PermuteCols")
> ### * PermuteCols
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: PermuteCols
> ### Title: Change Order of Marker Columns
> ### Aliases: PermuteCols
> 
> ### ** Examples
> 
> # generate deletion data
> Slist <-  SimDeletions( numlines = 50, plines = 0.2, nummarkers = 20,
+     Enumdel = 4, p.missing = 0.02,  seed = 1)
> 
> # print the data, including the marker ordering
> print(Slist[["nomissing"]])
 A summary of this object is: 

 The (recoded) deletion data are: 
0 0 0 0 0 0 0 0
0 0 0 0 0 0 0 0
0 0 0 0 0 0 0 0
0 0 0 0 0 0 0 0
0 0 0 0 0 0 0 0

 Marker names (in column data order) are: 
  L1 L2 L3 L4 L5 L6 L7 L8 L9 ... 

 Line names (in row data order) are: 
  M1 M2 M3 M4 M5 ... 

 The proportion of genotypes missing is 0 
> 
> # permute the data and print the data, including the new marker ordering
> print(PermuteCols(Slist[["nomissing"]]))
 A summary of this object is: 

 The (recoded) deletion data are: 
0 0 0 0 0 0 0 0
0 0 0 0 0 0 0 0
0 0 0 0 0 0 0 0
0 0 0 0 0 0 0 0
0 0 0 0 0 0 0 0

 Marker names (in column data order) are: 
  L1 L2 L3 L4 L5 L6 L7 L8 L9 ... 

 Line names (in row data order) are: 
  M16 M1 M9 M13 M12 ... 

 The proportion of genotypes missing is 0 
> 
> 
> 
> 
> cleanEx()
> nameEx("ReadData")
> ### * ReadData
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: ReadData
> ### Title: Read Deletion Data
> ### Aliases: ReadData
> 
> ### ** Examples
> 
> ## Not run: 
> ##D # read in deletion data
> ##D deldat <- ReadData(datafile="./deldata.txt", marker.names=TRUE, line.names=TRUE)
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("SimDeletions")
> ### * SimDeletions
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: SimDeletions
> ### Title: Simulation
> ### Aliases: SimDeletions simulate 'simulate deletion data'
> 
> ### ** Examples
> 
> 
> # To generate a inbred population of 500 plants 
> # where genotype data are collected on 20 marker loci,
> # the probability of a plant having a genomic deletion is 0.2, 
> # the average length of a deletion is 8 marker loci, and 
> # the probability of a marker genotype being missing is 0.02,
> # use:
> S <- SimDeletions( numlines = 500, plines = 0.2, nummarkers = 20,  
+     Enumdel = 8, p.missing = 0.02,  seed = NULL)
> 
> # print contents of matrix
> print(S$nomissing)
 A summary of this object is: 

 The (recoded) deletion data are: 
0 0 0 0 0 0 0 0
0 0 0 0 0 0 0 0
0 0 0 0 0 0 0 0
0 0 0 0 0 0 0 0
0 0 0 0 0 0 0 0

 Marker names (in column data order) are: 
  L1 L2 L3 L4 L5 L6 L7 L8 L9 ... 

 Line names (in row data order) are: 
  M1 M2 M3 M4 M5 ... 

 The proportion of genotypes missing is 0 
> 
> # print contents of matrix
> print(S$missing)
 A summary of this object is: 

 The (recoded) deletion data are: 
0 0 0 0 0 0 0 0
0 0 0 0 0 0 0 0
0 0 0 0 0 0 0 0
0 0 0 0 0 0 0 0
0 0 0 0 0 0 0 0

 Marker names (in column data order) are: 
  L1 L2 L3 L4 L5 L6 L7 L8 L9 ... 

 Line names (in row data order) are: 
  M1 M2 M3 M4 M5 ... 

 The proportion of genotypes missing is 0.02 
> 
> 
> 
> cleanEx()
> nameEx("delmap-package")
> ### * delmap-package
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: delmap-package
> ### Title: Deletion Mapping
> ### Aliases: delmap-package delmap
> ### Keywords: package
> 
> ### ** Examples
> 
> S <- SimDeletions(numlines = 500, plines = 0.2, nummarkers = 20,
+     Enumdel = 8, p.missing = 0.02,  seed = NULL)
> 
> 
> 
> cleanEx()
> nameEx("print.delmap.data")
> ### * print.delmap.data
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: print.delmap.data
> ### Title: Print Deletion Data
> ### Aliases: print.delmap.data print
> 
> ### ** Examples
> 
> # generate deletion data
> S <- SimDeletions( numlines = 500, plines = 0.2, nummarkers = 20,
+     Enumdel = 8, p.missing = 0.02,  seed = NULL)
> 
> # print contents of data where all genotypes are observed
> print(S$nomissing)
 A summary of this object is: 

 The (recoded) deletion data are: 
0 0 0 0 0 0 0 0
0 0 0 0 0 0 0 0
0 0 0 0 0 0 0 0
0 0 0 0 0 0 0 0
0 0 0 0 0 0 0 0

 Marker names (in column data order) are: 
  L1 L2 L3 L4 L5 L6 L7 L8 L9 ... 

 Line names (in row data order) are: 
  M1 M2 M3 M4 M5 ... 

 The proportion of genotypes missing is 0 
> 
> #print contents of data where there are missing genotypes
> print(S$missing)
 A summary of this object is: 

 The (recoded) deletion data are: 
0 0 0 0 0 0 0 0
0 0 0 0 0 0 0 0
0 0 0 0 0 0 0 0
0 0 0 0 0 0 0 0
0 0 0 0 0 0 0 0

 Marker names (in column data order) are: 
  L1 L2 L3 L4 L5 L6 L7 L8 L9 ... 

 Line names (in row data order) are: 
  M1 M2 M3 M4 M5 ... 

 The proportion of genotypes missing is 0.02 
> 
> 
> 
> 
> ### * <FOOTER>
> ###
> cat("Time elapsed: ", proc.time() - get("ptime", pos = 'CheckExEnv'),"\n")
Time elapsed:  0.252 0.056 0.314 0 0 
> grDevices::dev.off()
null device 
          1 
> ###
> ### Local variables: ***
> ### mode: outline-minor ***
> ### outline-regexp: "\\(> \\)?### [*]+" ***
> ### End: ***
> quit('no')
